!pip install opencv-python numpy matplotlib ultralytics

from ultralytics import YOLO
import cv2
import numpy as np
import os
import torch
import torch.nn as nn
import torch.optim as optim
import random
from collections import deque, defaultdict

# YOLOv8 모델 로드
model = YOLO("yolov8n.pt")  # 가장 가벼운 모델

from google.colab import files
uploaded = files.upload()

# 업로드된 파일명 추출
video_path = next(iter(uploaded))

# replay
class ReplayBuffer:
    def __init__(self, capacity=500):
        self.buffer = deque(maxlen=capacity)

    def add(self, x_vec, label):
        self.buffer.append((x_vec, label))

    def sample(self, batch_size=32):
        batch = random.sample(self.buffer, min(len(self.buffer), batch_size))
        xs, ys = zip(*batch)
        xs = torch.tensor(xs, dtype=torch.float32)
        ys = torch.tensor(ys, dtype=torch.long)
        return xs, ys

    def __len__(self):
        return len(self.buffer)

# 결과 분석
def evaluate_ocl_metrics(all_preds, all_gts, predictions_by_class, groundtruth_by_class):
    print("\n\n📊 Online Continual Learning Metrics:")
    total_correct = sum(p == g for p, g in zip(all_preds, all_gts))
    acc = total_correct / (len(all_gts) + 1e-6)
    print(f"FM (Final Accuracy): {acc:.4f}")

    seen_classes = sorted(predictions_by_class.keys())
    bwt_values, im_values = [], []

    for c in seen_classes:
        preds = np.array(predictions_by_class[c])
        gts = np.array(groundtruth_by_class[c])
        acc_end = np.mean(preds == gts)
        acc_start = 1.0  # FTRL은 초기 예측이 불확실하다고 가정
        bwt_values.append(acc_end - acc_start)
        im_values.append(acc_start - acc_end)

    bwt = np.mean(bwt_values) if bwt_values else 0.0
    im = np.mean(im_values) if im_values else 0.0

    print(f"BWT (Backward Transfer): {bwt:.4f}")
    print(f"FWT (Forward Transfer): {0.0:.4f}")  # 모든 클래스 즉시 학습
    print(f"IM (Intransigence): {im:.4f}")


